/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Forms;

import assessment.Customer;
import assessment.DBhandler;
import assessment.Order;
import assessment.OrderLine;
import assessment.Product;
import assessment.Staff;
import java.sql.SQLException;
import java.text.DecimalFormat;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author abelt
 */
public class ViewOrders extends javax.swing.JFrame {
    boolean loggedIn;
    public DBhandler db;
    private HashMap<Integer, Order> orders;
    private HashMap<Integer, OrderLine> orderLine;
    private HashMap<Integer, Product> product;
    public Customer customer;
    public Staff staff;
    
    /**
     * Creates new form ViewOrders
     */
    public ViewOrders() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstOrders = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstProducts = new javax.swing.JList<>();
        btnCancel = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        txtUsername = new javax.swing.JTextField();
        txtPrice = new javax.swing.JTextField();
        lblMsg = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Orders");

        jLabel2.setText("Products");

        lstOrders.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstOrdersValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(lstOrders);

        jScrollPane2.setViewportView(lstProducts);

        btnCancel.setText("Cancel Order");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        jLabel3.setText("Username:");

        jLabel4.setText("Price:");

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblMsg.setText("Msg");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnBack))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtUsername)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel4))
                                        .addGap(0, 30, Short.MAX_VALUE))
                                    .addComponent(txtPrice)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblMsg)
                                    .addComponent(jLabel2))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE)
                        .addComponent(jScrollPane2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(5, 5, 5)
                        .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel4)
                        .addGap(9, 9, 9)
                        .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel)
                    .addComponent(btnBack))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(lblMsg)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lstOrdersValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstOrdersValueChanged
        
        if(lblMsg.getText().equals("1"))
        {
            lblMsg.setText("0");
        }
        else
        {
            fillProduct();
            lblMsg.setText("1");
        }
    }//GEN-LAST:event_lstOrdersValueChanged

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        if(customer != null) 
        {
            CustomerHome ch = new CustomerHome();
            ch.passCustomer(customer);
            ch.setName(customer.getFirstName());
            ch.setVisible(true);
            this.dispose();
        }
        else
        {
            StaffHome sh = new StaffHome();
            sh.passStaff(staff);
            sh.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        try {
            DBhandler db = new DBhandler();
            DefaultListModel model = new DefaultListModel();
            Order order = new Order();
            
            String orderValue = lstOrders.getSelectedValue();
            JOptionPane jP = new JOptionPane();
            Object[] options = { "Yes", "No" };
            int n = 4;
            if(orderValue != null)
                {   
                    n = JOptionPane.showOptionDialog(null, "Are you sure you want to cancel the selected order?", "Assessment", JOptionPane.YES_NO_OPTION,
                        JOptionPane.QUESTION_MESSAGE, null, options, options[0]);
                    switch (n)
                    {
                        case 0:
                            String orderList = lstOrders.getSelectedValue();
                            lstOrders.clearSelection();

                            int orderId = Integer.parseInt(orderList.substring(0, orderList.indexOf("-")));
                            db.deleteOrder(orderId);
                            fillOrderList();
                            
                            lstProducts.setModel(model);
                            txtUsername.setText("");
                            txtPrice.setText("");
                            break;
                        case 1:
                            break;
                        default:
                            break;
                    }
                }
        } catch (SQLException ex) {
            Logger.getLogger(ViewOrders.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(ViewOrders.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_btnCancelActionPerformed
    public void fillProduct() 
    {
        String orderValue = lstOrders.getSelectedValue();
        if(orderValue == null)
        {
            //does nothing
        }
        else
        {
            try {
                DefaultListModel model = new DefaultListModel();
                orderValue = orderValue.substring(0, orderValue.indexOf("-"));
                int orderId = Integer.parseInt(orderValue);
                Order order = null;
                orderLine = db.loadOrderLine(orderId);
                product = db.loadProduct();
                for(Map.Entry<Integer, OrderLine> orderEntry : orderLine.entrySet())
                {
                    OrderLine ol = orderEntry.getValue();
                    if(ol.getOrderID() == orderId)
                    {
                        for(Map.Entry<Integer, Product> productEntry : product.entrySet())
                        {
                            Product product = productEntry.getValue();
                            if(ol.getProductID() == product.getProductId())
                            {
                                model.addElement(product.getProductName());
                            }
                            for(Map.Entry<Integer, Order> ordersEntry : orders.entrySet())
                            {
                                Order actualOrder = ordersEntry.getValue();
                                if(actualOrder.getOrderId() == orderId)
                                {
                                    txtUsername.setText(actualOrder.getUsername());
                                    DecimalFormat formatter = new DecimalFormat("#0.00");
                                    
                                    txtPrice.setText("£" +formatter.format(actualOrder.getOrderTotal()));
                                }
                            }
                        }
                    }
                }
                lstProducts.setModel(model);
            } catch (SQLException ex) {
                Logger.getLogger(ViewOrders.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
            
        }
    }
    public void fillOrderList() throws SQLException
    {
        DefaultListModel model = new DefaultListModel();
        orders = new HashMap();
        for(Map.Entry<Integer, Order> ordersEntry : orders.entrySet())
        {
            Order actualOrder = ordersEntry.getValue();
            if(actualOrder.getStatus().equals("Complete"))
            {
                model.addElement(Integer.toString(actualOrder.getOrderId()) + "-" + actualOrder.getOrderDate());
            }
            lstOrders.setModel(model);
        }
        if(customer != null) 
            {
                orders = db.getOrders(customer.getUserName());
            }
            else
            {
                orders = db.getOrders("");
            }
        
    }
    public void passCustomer(Customer customer, boolean loggedIn) throws SQLException, ClassNotFoundException 
    {
        db = new DBhandler();
        this.customer = customer;
        this.loggedIn = loggedIn;
    }
    
    public void passStaff(Staff staff) throws SQLException, ClassNotFoundException 
    {
        db = new DBhandler();
        this.staff = staff;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewOrders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewOrders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewOrders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewOrders.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewOrders().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCancel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblMsg;
    private javax.swing.JList<String> lstOrders;
    private javax.swing.JList<String> lstProducts;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables
}
